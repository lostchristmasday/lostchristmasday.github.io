{"meta":{"title":"Last Christmas-去年圣诞","subtitle":null,"description":"去年圣诞的博客-","author":"last christmas","url":""},"pages":[{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"bangumi","date":"2022-02-26T16:06:48.000Z","updated":"2022-02-26T16:19:02.234Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2022-02-26T15:57:00.218Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"目前不需赞助哦~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2022-02-26T16:24:16.265Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2022-02-26T16:01:30.263Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2022-02-26T16:04:56.958Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[きょうせい] 与&nbsp; LastChristmas&nbsp; （ 去年圣诞 ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2022-02-26T16:29:13.960Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"-该主题基于hexo制作-作者:去年圣诞（lastchristmas）-","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"JS案例","slug":"JS分时访问案例","date":"2022-03-12T03:22:49.000Z","updated":"2022-03-12T03:48:22.305Z","comments":true,"path":"2022/03/12/JS分时访问案例/","link":"","permalink":"/2022/03/12/JS分时访问案例/","excerpt":"","text":"分时访问案例案例要求：根据每天不同时间(上午、中午、下午、晚上) 访问网页得到不同的图片和问候语 核心思路：通过内置对象Date获取当前时间，并通过多分枝语句更改对应图片元素属性 核心代码：&lt;body&gt; &lt;div&gt;这是一个问候语句&lt;/div&gt; &lt;img src=&quot;https://s3.bmp.ovh/imgs/2022/02/93bc65b17c34a365.jpg&quot; alt=&quot;&quot;&gt; //此处图片没有进行分时修改，需要的自行实践成长 &lt;/body&gt; &lt;script&gt; var img = document.querySelector(&#39;img&#39;) var div = document.querySelector(&#39;div&#39;) var date = new Date() var hour = date.getHours() if ( 6 &lt; hour &lt; 11){ div.innerText = &#39;早上好&#39; } else if (11 &lt; hour &lt; 14){ div.innerText = &#39;中午好&#39; } else if (14 &lt; hour &lt; 18){ div.innerText = &#39;下午好&#39; } else{ div.innerText = &#39;晚上好&#39; }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"案例","slug":"案例","permalink":"/tags/案例/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"JS对象方法","slug":"Math方法","date":"2022-03-09T03:34:01.000Z","updated":"2022-03-10T07:32:14.288Z","comments":true,"path":"2022/03/09/Math方法/","link":"","permalink":"/2022/03/09/Math方法/","excerpt":"","text":"目录导读（本章重要）：[TOC] Math对象 方法 含义 Math.PI 圆周率 Math.floor() 向下取整，1.9取1 Math.ceil() 向上取整，2.1取3 Math.round() 四舍五入，注：-1.5 结果为-1 Math.abs() 绝对值，字符串型转为数字型 Math.max/Math.min 最大值和最小值 随机数：random()方法一：Math.random() 函数返回一个浮点数, 伪随机数在范围从0到小于1，也就是说，从0（包括0）往上，但是不包括1（排除1），然后您可以缩放到所需的范围。实现将初始种子选择到随机数生成算法;它不能被用户选择或重置。 方法二：这个例子返回了一个在指定值之间的随机整数。这个值不小于 min （如果 min 不是整数，则不小于 min 的向上取整数），且小于（不等于）max。 function getRandomIntNumber(min,max){ min = Math.ceil(min) max = Math.floor(max) return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值 } 例题： function getRandomInt(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min + 1)) + min; //不含最大值，含最小值 } var b = getRandomInt(1, 10) document.title = b while (1) { var a = prompt() if (a &lt; b) { alert(&quot;数字小了，继续猜&quot;) continue } else if (a &gt; b) { alert(&quot;数字大了，继续猜&quot;) continue } else { alert(&quot;猜对了&quot;) break } } Date对象构造函数，要定义变量使用 方法：var date = new Date() //1 var date1 = new Date(2022,2,9)//输出2022年 3月 9日，不是2月 注意 参数 含义 year 表示年份的整数值。 0到99会被映射至1900年至1999年，其它值代表实际年份 monthIndex 表示月份的整数值，从 0（1月）到 11（12月） date(可选) 表示一个月中的第几天的整数值，从1开始。默认值为1 hours(可选) 表示一天中的小时数的整数值 (24小时制)。默认值为0（午夜） minutes(可选) 表示一个完整时间（如 01:10:00）中的分钟部分的整数值。默认值为0 seconds(可选) 表示一个完整时间（如 01:10:00）中的秒部分的整数值。默认值为0 milliseconds(可选) 表示一个完整时间的毫秒部分的整数值。默认值为0 方法： 方法名 说明 代码 getFullYear() 获取年 dObj.getFullYear() getMonth() 获取月(0-11) 同上 getDate() 获取当天日期 同上 getDay() 获取周几(0-6) 同上 getHours() 获取当前小时 同上 getMinutes() 获取当前分钟 同上 getSeconds() 获取当前秒钟 同上 console.log(date.getMonth() + 1)//返回的月份要+1 console.log(date.getDay())//返回周一是1，周日是0 Date案例：1.封装函数返回当前时分秒 function getTime(){ var date = new Date() var hourNow = date.getHours() hourNow &lt; 10 ? &#39;0&#39; + hourNow : hourNow //判断是否小于10，如果小于补0 var minuteNow = date.getMinutes() minuteNow &lt; 10 ? &#39;0&#39; + minuteNow : hourNow var secondNow = date.getSeconds() secondNow &lt; 10 ? &#39;0&#39; + secondNow : hourNow return hourNow + &#39;:&#39; + minuteNow + &#39;:&#39; + secondNow } 2.现在时间总毫秒数(距1970/1/1) var date = new Date() console.log(date.valueOf()) //法1 console.log(date.getTime()) //法2 var date1 = +new Date() //法3 最常用写法 console.log(Date.now()) //新方法H5 3.倒计时（重要）时间戳转化为天、时、分、秒 毫秒/1000 = 总秒总秒/60/60/24 = 天总秒/60/60%24 = 小时总秒/60%60 = 分钟总秒%60 = 秒 function countDown(time) { var nowTime = +new Date() var inputTime = +new Date(time) var timeDistance = (inputTime - nowTime) / 1000 //求出总秒 var day = parseInt(timeDistance/60/60/24) day &lt; 10 ? &#39;0&#39; + day : day var hour = parseInt(timeDistance/60/60%24) hour &lt; 10 ? &#39;0&#39; + hour : hour var minute = parseInt(timeDistance/60%60) minute &lt; 10 ? &#39;0&#39; + minute : minute var second = parseInt(timeDistance%60) second &lt; 10 ? &#39;0&#39; + second : second return day + &#39;天&#39; + hour + &#39;时&#39; + minute + &#39;分&#39; + second + &#39;秒&#39; } console.log(countDown(&#39;2022-3-10 10:00:00&#39;)) 数组对象翻转数组函数function reverse(arr) { if(arr instanceof Array){ var newArr = [] for (var i = arr.length - 1; i &gt;=0; i--){ newArr[newArr.length] = arr[i] } return newArr }else{ return &#39;非数组&#39; } }//函数 console.log(reverse([1,2,3]))//调用 检测是否为数组var arr = [] console.log(arr instanceof Array) //法1 console.log(Array.isArray(arr))//法2 添加删除数组元素//添加 返回值是数组长度 var arr = [1,2,3] arr.push(4,&#39;dog&#39;) //结果[1,2,3,4,&#39;dog&#39;],添加在末尾 arr.unshift(0,&#39;cat&#39;) //结果[0,&#39;cat&#39;,1,2,3,4,&#39;dog&#39;]，添加在最前 //删除 var arr = [1,2,3] arr.pop() //删除最后一个元素，返回值是被删除的元素 arr.shift() //删除第一个元素，返回值是被删除的元素 （重要）筛选数组及冒泡排序循环筛选数组时可用 newArr.push(arr[i])操作将原数组筛选数值推入新数组 var arr = [1,2,3,4,5] arr.reverse() //内置翻转操作函数 var arr1 = [58,25,65,11,43,37] arr1.sort(function(a,b){ return a - b //按照升序的顺序排序，完美写法 （b - a）为降序 }) 数组索引arr.indexOf(&#39;数组元素&#39;)可获取当前元素对应首次出现数组索引号，找不到该元素，就返回-1arr.lastIndexOf(&#39;数组元素&#39;)获取最后出现的索引号 核心案例之数组去重var oldArr = [&#39;x&#39;,&#39;y&#39;,&#39;b&#39;,&#39;c&#39;,&#39;x&#39;,&#39;b&#39;,&#39;d&#39;,&#39;a&#39;,&#39;b&#39;,&#39;y&#39;,&#39;c&#39;,&#39;d&#39;,&#39;u&#39;,&#39;o&#39;,&#39;c&#39;] var newArr = [] function clearMoreDisplay(){ for(var i = 0; i&lt;oldArr.length; i++){ if(newArr.indexOf(oldArr[i]) == -1){ newArr.push(oldArr[i]) } } return newArr } console.log(clearMoreDisplay()) 数组转为字符串arr.toString()和arr.jion() 字符串对象字符串字符返回位置var str = &#39;Hello Hello&#39; console.log(str.indexOf(&#39;e&#39;)) //输出1 console.log(str.indexOf(&#39;e&#39;,4)) //从第4个开始输出 未找到返回-1 案例查找字符串”jnvkshgbjsbujxnakdjfjdjdfjakjfkd”中所有 j 出现的位置和次数 var str = &quot;jnvkshgbjsbujxnakdjfjdjdfjakjfkd&quot; var countNums = 0 function countTimes(){ for (var i = 0; i &lt; str.length; i++){ while(str.indexOf(&#39;j&#39;,i) != -1){ console.log(str.indexOf(&#39;j&#39;,i)) i = str.indexOf(&#39;j&#39;,i) //保证了下次循环从索引到的数值开始，不然总数会一直+1 countNums++ break } } console.log(&#39;j出现的总次数：&#39; + countNums); } countTimes() 字符串位置返回字符var = &#39;cat&#39; console.log(str.charAt(2)) //输出t //因此，有遍历法2 for (var i = 0; i &lt; str.length; i++){ console.log(str.charAt(i)) } 方法 方法名 说明 使用 charAt(index) 返回指定位置字符 str.charAt(0) charCodeAt(index) 获取指定位置字符ASCII码 str.charCodeAt(0) str[index] 获取指定位置字符 HTML5,IE8+支持,和第一个一样 案例判断字符串”jnvkshgbjsbujxnakdjfjdjdfjakjfkd”出现次数最多的字符并统计次数 var str = &quot;jnvkshgbjsbujxnakdjfjdjdfjakjfkd&quot; var max = 0 var lastChar = &#39;&#39; var countNums = { } function mostAppearNumber() { for (var i = 0; i &lt; str.length; i++){ var chars = str.charAt(i) if(countNums[chars]) { countNums[chars]++ } else { countNums[chars] = 1 } } for (var k in countNums){ //K是属性名，obj[k]是属性值 if( countNums[k] &gt; max ){ max = countNums[k] lastChar = k } } console.log(&#39;最多的是:&#39;+ lastChar + &#39;出现了&#39; + max +&#39;次&#39;); } mostAppearNumber()","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"JS理论","slug":"JS理论","permalink":"/tags/JS理论/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"数据类型转换和简单案例(理论完结)","slug":"数据类型转换和简单案例","date":"2022-03-03T13:18:45.000Z","updated":"2022-03-03T14:02:10.950Z","comments":true,"path":"2022/03/03/数据类型转换和简单案例/","link":"","permalink":"/2022/03/03/数据类型转换和简单案例/","excerpt":"","text":"数据类型转换转换为数字型 方式 说明 案例 parselnt(string)函数 将string转化成整数数值型 parselnt(‘78’) parseFloat(string)函数 将string类型转化成浮点数数值型 parseFloat(78.21’’) Number()强制转换 将string类型转换为数值型 Number(‘12’) parselnt如果里面是浮点数，直接取整；如果后面是字母，会直接去掉单位或字母 转为boolean未定义、为空的值都转化为flase,其余为true 简单案例输入出生年份，浏览器输出今年多大 var year = 2022; var age = prompt(&#39;Enter your birth year&#39;); trueAge = 2022 - age; alert(&#39;You are &#39; + trueAge + &#39; years old&#39;)","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"JS理论","slug":"JS理论","permalink":"/tags/JS理论/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"JS数据类型(已完成)","slug":"JS数据类型","date":"2022-02-28T07:26:12.000Z","updated":"2022-03-02T06:43:29.864Z","comments":true,"path":"2022/02/28/JS数据类型/","link":"","permalink":"/2022/02/28/JS数据类型/","excerpt":"","text":"数据类型：1.简单的数据类型(Number,String,Boolean,Undefined,Null)2.复杂数据类型(object)3.用Typeof判断数据类型 简单数据类型 说明 默认值 Number 数字型(整型和浮点型) 0 Boolean 布尔值,如true、false，等价于1和0 false String 字符串,JS的字符串都带””引号 ** Undefined var a;声明变量a但没有赋值,a=undefined undefined Null var a = null;声明了变量a为空格 null Number进制： JavaScript中的进制(10进制不谈) 写法 举例 八进制 数字前写0 var num = 011;即9(十进制) 十六进制 数字前写0x var num = 0x1a;即26(十进制) 可通过log输出数字型的最大值和最小值：最大值：Number.MAX_VALUE,最小值：Number.MIN_VALUE 特殊值： 数值类 含义 Infinity 无穷大，大于任何数 -Infinity 无穷小，小于任何数 NaN，Not a Number 代表一个非数值 isNaN判断是否是数字，如果isNaN(a)，其中a确实为数字，返回false,否则返回true String字符串 字符串转义符 解释说明 \\n 换行符号 \\ \\ 斜杠\\ \\ ‘ ‘单引号 \\ ‘’ ‘’双引号 \\t tab 缩进 \\b 空格，blank的意思 .字符串长度： var str = &#39;lastchristmas&#39;; console.log(str.length);//输出字符串长度 2.1字符串拼接字符串+任何类型=拼接后的字符串 console.log(&#39;11&#39; + 5);//115 console.log(11 + 5);//16 console.log(&#39;hello&#39; + &#39; &#39; + &#39;world&#39;);//hello world 2.2字符串拼接已设置变量的字符串拼接 var age = 21; console.log（&#39;lastchristmas is&#39; + age &#39;years&#39;）;//去年圣诞21岁 3.案例输入一个数字代表你的年龄，弹出窗口输出你的年龄 var age = prompt(&#39;Enter your age:&#39;); var str = &#39;Your age is&#39; + age; alert(str); boolean,undefined,nullvar a = true; var b = flase; console.log(a + 1)// 2 console.log(b + 1)// 1 var str = undefined; console.log(str + apple)//undefinedapple console.log(str + 10)//NaN var x = null; console.log(x + apple)//nullapple console.log(x + 10)//10","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"JS理论","slug":"JS理论","permalink":"/tags/JS理论/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"JavaScript初步认知","slug":"JavaScript","date":"2022-02-28T00:09:11.000Z","updated":"2022-02-28T01:47:21.948Z","comments":true,"path":"2022/02/28/JavaScript/","link":"","permalink":"/2022/02/28/JavaScript/","excerpt":"","text":"JavaScript书写位置和注释书写位置：分为行内、内嵌、外部：&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src=&quot;XXX.js&quot;&gt;&lt;/script&gt; &lt;!--引用外部文件--&gt; &lt;!--内嵌写这里 --&gt; &lt;/head&gt; &lt;body&gt; &lt;!--行内写这里--&gt; &lt;/body&gt; &lt;/html&gt; 单行注释和多行注释单行注释：快捷键Crtl+/ //这是一条注释 多行注释：1.快捷键Ctrl+Alt+a /*这是多行注释的第一行 这是多行注释的第二行*/ JavaScript输入输出语句 方法 说明 归属 alert(msg) 浏览器弹出警示框 浏览器 console.log(msg) 浏览器控制台打印输出信息 浏览器 prompt(info) 浏览器弹出输出框，用户可以输入 浏览器 prompt(&quot;Input your age:&quot;); //在网页中弹出输出框，意为输入年龄 alert(&quot;Your age is:&quot;) //弹出信息框，意为你的年龄是： console.log(&quot;只有我能看到的:&quot;) //用于调试，在审查元素的Console内查看 变量在内存中申请一块来存放数据 变量使用1.声明变量//声明变量 var age;//声明一个名称为age的变量 var是一个JS关键字，用来声明变量(variable)，计算机自动分配变量内存空间，不需要人为操作age是’我’人为定义的变量名，需要通过变量名来访问内存分配空间 2.赋值输出var age; age = 21; //给age赋值21 console.log(age); //进入检查，通常是F12在Console可调试查询 =用来把右边的赋值给左边的变量空间，代表赋值 3.变量的初始化var age = 21; //一步到位声明age为21的变量 4.简单输入输出变量案例var myname = prompt(&quot;Input your name&quot;);//用户输入一个myname变量 alert(myname);//输出变量 变量语法扩展1.一次性声明多个变量：用逗号隔开，分号结尾var age=21, address=&#39;xuzhou&#39;, live-money=1600; 2.声明变量的特殊情况 情况 说明 结果 var age;console.log(age); 只声明 不赋值 undefined console.log(age); 不声明 不赋值 直接调试引用 报错Error age=10;console.log(age) 不声明 只赋值 10 变量命名规范 由字母(A-Za-z)、数字(0-9)、下划线_、美元符号$组成，如:userName,$money 严格区分大小写,Name和name是两个变量 不能以数字开头,21Name这种是错误的 不能是关键字、保留字,如:var、for、while 首字母小写,后面字母大写,如:myLastChristmas","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"JS理论","slug":"JS理论","permalink":"/tags/JS理论/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"将Hexo博客部署到远程仓库","slug":"3","date":"2022-02-27T16:01:43.000Z","updated":"2022-02-28T00:18:54.110Z","comments":true,"path":"2022/02/28/3/","link":"","permalink":"/2022/02/28/3/","excerpt":"","text":"前置工作1.已经本地博客搭建完毕，即在127.0.0.1本地调试完成何为本地完成呢，即输入hexo s时无报错且在本地打开浏览器能正常显示，例如：即第一步已经完成 2.已经在Github类完成项目仓库的创建并能与本机进行连接仓库创建和本机连接方式自行百度（成长的根源来源于实践）要注意仓库名的设置要XXXXXXXX.github.io（XXXXXXXX代表你的仓库名) 部署步骤首先hexo clean清除本地无用缓存 然后hexo g -d一步到位即可 最后实践得真知，博主在搭建和部署的时候踩过很多坑；有的各种问题报错我有时间另开一文细说，不喜欢多说废话，各种报错在所难免，多用百度。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"博客","slug":"博客","permalink":"/tags/博客/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"CE找游戏基址","slug":"2","date":"2022-02-26T16:34:02.000Z","updated":"2022-02-28T00:19:27.822Z","comments":true,"path":"2022/02/27/2/","link":"","permalink":"/2022/02/27/2/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"CE","slug":"CE","permalink":"/tags/CE/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"博客重启-也是我的重启","slug":"1","date":"2022-02-26T13:34:35.000Z","updated":"2022-02-27T11:28:43.096Z","comments":true,"path":"2022/02/26/1/","link":"","permalink":"/2022/02/26/1/","excerpt":"","text":"1.为什么不用原来的3-hexo博客 3-hexo博客属于简单的三段式博客：一为明显简约的分类，二多条目搜索，三即时显示。但3-hexo主题更适合初学者，博主自学hexo也有段时间了，比起3-hexo的多数不可更改和功能太过简单，将自己的人生记录站主题换为樱花系列博客会更适合自己。 2.博客重开意味着什么希望自己能有一个自己记录监督自己的地方，有博客肯定比没博客的人更加喜欢记录自己，通过一次次的记录鞭策自己。 3.新博客的主要介绍 广义功能 【归档】：相当于通过分类来大概筛选我所写的文章 【清单】：可以看到我喜欢的书呀、音乐呀、动漫呀等等 【留言板】：给我留言（不会有人不知道这个的作用吧） 【友人帐】：访问我朋友的博客 【赞赏】：打赏功能（已被博主阉割） 【关于】：可以大概了解博主，并且与博主虚拟人格聊天 文字区分【代码块】：例如：C++ #include&lt;iostream&gt; using namespace std; int main() { cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl; return 0; } 也比原来的3-hexo更加方便好用","categories":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"/tags/随笔/"}],"keywords":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}]}]}